#include "clientwidget.h"
#include "ui_clientwidget.h"

clientWidget::clientWidget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::clientWidget)
{
    ui->setupUi(this);
    //离线状态
    status = false;
    connect(&tcpSocket, SIGNAL(connected()), this, SLOT(onConnected()));
    connect(&tcpSocket, SIGNAL(disconnected()), this, SLOT(onDisconnected()));
    connect(&tcpSocket, SIGNAL(readyRead()), this, SLOT(onReadyRead()));
    connect(&tcpSocket, SIGNAL(error(QAbstractSocket::SocketError)), this, SLOT(onError()));
}

clientWidget::~clientWidget()
{
    delete ui;
}

//发送按钮对应的槽函数
void clientWidget::on_sendButton_clicked()
{
    //获取用户输入的聊天消息
    QString msg = ui->messageEdit->text();
    if(msg == "") {
        return;
    }
    msg = username + ":" + msg;
    //发送聊天消息
    tcpSocket.write(msg.toUtf8());
    //清空消息输入框
    ui->messageEdit->clear();
}

//连接服务器按钮对应的槽函数
void clientWidget::on_connectButton_clicked()
{
    //如果当前是离线状态，则建立和服务器连接
    if(status == false) {
        //获取服务器IP
        serverIP.setAddress(ui->serverIPEdit->text());
        //获取服务器端口
        serverPort = ui->serverPortEdit->text().toShort();
        //获取聊天室昵称
        username = ui->usernameEdit->text();
        //向服务器发送连接请求
        //成功发送信号connected，失败发送信号error
        tcpSocket.connectToHost(serverIP, serverPort);
    } else {
        //如果当前是在线状态，则断开和服务器连接
        //向服务器发送离开聊天室的提示消息
        QString msg = username + ":离开了聊天室";
        tcpSocket.write(msg.toUtf8());
        //关闭和服务器连接,同时发送信号:disconnected
        tcpSocket.disconnectFromHost();
    }
}

//和服务器连接成功时执行的槽函数
void clientWidget::onConnected()
{
    //在线
    status = true;
    //恢复按钮状态
    ui->sendButton->setEnabled(true);
    //禁用IP
    ui->serverIPEdit->setEnabled(false);
    //禁用port
    ui->serverPortEdit->setEnabled(false);
    //禁用昵称
    ui->usernameEdit->setEnabled(false);
    ui->connectButton->setText("离开聊天室");

    //向服务器发送进入聊天室提示消息
    QString msg = username + ":进入了聊天室";
    //toUtf8:QString转换QByteArray
    tcpSocket.write(msg.toUtf8());
}

//和服务器断开连接时执行的槽函数
void clientWidget::onDisconnected()
{
    //离线
    status = false;
    //禁用按钮状态
    ui->sendButton->setEnabled(false);
    //恢复IP
    ui->serverIPEdit->setEnabled(true);
    //恢复port
    ui->serverPortEdit->setEnabled(true);
    //恢复昵称
    ui->usernameEdit->setEnabled(true);
    ui->connectButton->setText("连接服务器");
}

//接收聊天消息的槽函数
void clientWidget::onReadyRead()
{
    if(tcpSocket.bytesAvailable()) {
        //接收消息
        QByteArray buf = tcpSocket.readAll();
        //显示消息
        ui->listWidget->addItem(buf);
        ui->listWidget->scrollToBottom();
    }
}

//网络异常时执行的槽函数
void clientWidget::onError()
{
    //errorString():获取网络异常的原因
    QMessageBox::critical(this, "ERROR", tcpSocket.errorString());
}